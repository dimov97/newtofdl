{"ast":null,"code":"import { setAppStatusAC, setIsInitializedAC } from '../../app/app-reducer';\nimport { authAPI, Result_Code } from \"../../api/todolists-api\";\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\nconst initialState = {\n  isLoggedIn: false\n};\nexport const authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'login/SET-IS-LOGGED-IN':\n      return { ...state,\n        isLoggedIn: action.value\n      };\n\n    default:\n      return state;\n  }\n}; // actions\n\nexport const setIsLoggedInAC = value => ({\n  type: 'login/SET-IS-LOGGED-IN',\n  value\n}); // thunks\n\nexport const loginTC = data => async dispatch => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const response = await authAPI.login(data);\n\n    if (response.data.resultCode === Result_Code.OK) {\n      dispatch(setIsLoggedInAC(true));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(response.data, dispatch);\n    }\n  } catch (e) {\n    handleServerNetworkError(e, dispatch);\n  }\n};\nexport const initializeAppTC = () => async dispatch => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const response = await authAPI.me();\n\n    if (response.data.resultCode === Result_Code.OK) {\n      dispatch(setIsLoggedInAC(true));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(response.data, dispatch);\n    }\n  } catch (e) {\n    handleServerNetworkError(e, dispatch);\n  } finally {\n    dispatch(setIsInitializedAC(true));\n  }\n};\nexport const logOutTC = () => async dispatch => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const response = await authAPI.logOut();\n\n    if (response.data.resultCode === Result_Code.OK) {\n      dispatch(setIsLoggedInAC(false));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(response.data, dispatch);\n    }\n  } catch (e) {\n    handleServerNetworkError(e, dispatch);\n  }\n}; // types","map":{"version":3,"sources":["/Users/macbookair/Documents/tofdl/src/features/Login/auth-reducer.ts"],"names":["setAppStatusAC","setIsInitializedAC","authAPI","Result_Code","handleServerAppError","handleServerNetworkError","initialState","isLoggedIn","authReducer","state","action","type","value","setIsLoggedInAC","loginTC","data","dispatch","response","login","resultCode","OK","e","initializeAppTC","me","logOutTC","logOut"],"mappings":"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","sourcesContent":[" import { Dispatch } from 'redux'\nimport {\n    SetAppErrorActionType,\n    setAppStatusAC,\n    SetAppStatusActionType,\n    setIsInitializedAC,\n    SetIsInitializedActionType\n} from '../../app/app-reducer'\n import {LoginDataType} from \"./Login\";\n import {authAPI, Result_Code} from \"../../api/todolists-api\";\n import {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginDataType) => async (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n\n    try {const response = await authAPI.login(data)\n\n        if (response.data.resultCode === Result_Code.OK) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(response.data,dispatch)\n        }\n    } catch (e) {\n        handleServerNetworkError(e as {message:string},dispatch)\n    }\n}\n\n export const initializeAppTC = () => async (dispatch: Dispatch<ActionsType>) => {\n     dispatch(setAppStatusAC('loading'))\n\n     try {const response = await authAPI.me()\n\n         if (response.data.resultCode === Result_Code.OK) {\n             dispatch(setIsLoggedInAC(true))\n             dispatch(setAppStatusAC('succeeded'))\n         } else {\n             handleServerAppError(response.data,dispatch)\n         }\n     } catch (e) {\n         handleServerNetworkError(e as {message:string},dispatch)\n     }\n     finally {\n         dispatch(setIsInitializedAC(true))\n     }\n\n }\n\n export const logOutTC = () => async (dispatch: Dispatch<ActionsType>) => {\n     dispatch(setAppStatusAC('loading'))\n\n     try {const response = await authAPI.logOut()\n\n         if (response.data.resultCode === Result_Code.OK) {\n             dispatch(setIsLoggedInAC(false))\n             dispatch(setAppStatusAC('succeeded'))\n         } else {\n             handleServerAppError(response.data,dispatch)\n         }\n     } catch (e) {\n         handleServerNetworkError(e as {message:string},dispatch)\n     }\n\n }\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType | SetIsInitializedActionType\n"]},"metadata":{},"sourceType":"module"}