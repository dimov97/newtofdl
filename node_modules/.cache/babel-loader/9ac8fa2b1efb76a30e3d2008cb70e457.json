{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Documents/tofdl/src/features/Login/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginTC } from \"./auth-reducer\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Login = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n      captcha: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      if (!values.password) {\n        errors.password = 'Required';\n      } else if (values.password.length < 3) {\n        errors.password = 'Password should be more than 3 symbols';\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    }\n  });\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: 'center',\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      justifyContent: 'center',\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"To log in get registered\", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: 'https://social-network.samuraijs.com/',\n                target: '_blank',\n                children: \" here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"or use common test account credentials:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Email: free@samuraijs.com\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Password: free\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Email\",\n              margin: \"normal\",\n              ...formik.getFieldProps('email')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this), formik.touched.email && formik.errors.email && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: 'red'\n              },\n              children: formik.errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 74\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"password\",\n              label: \"Password\",\n              margin: \"normal\",\n              ...formik.getFieldProps('password')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 25\n            }, this), formik.touched.password && formik.errors.password && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: 'red'\n              },\n              children: formik.errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 80\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              label: 'Remember me',\n              control: /*#__PURE__*/_jsxDEV(Checkbox, { ...formik.getFieldProps('password'),\n                checked: formik.values.rememberMe\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 52\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: 'submit',\n              variant: 'contained',\n              color: 'primary',\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Login, \"7A0z6vT5KiyBZhLbHZ2OBpuVKng=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/macbookair/Documents/tofdl/src/features/Login/Login.tsx"],"names":["React","Grid","Checkbox","FormControl","FormControlLabel","FormGroup","FormLabel","TextField","Button","useFormik","useDispatch","useSelector","loginTC","Navigate","Login","dispatch","isLoggedIn","state","auth","formik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","length","onSubmit","resetForm","handleSubmit","getFieldProps","touched","color"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\nexport type LoginDataType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n    captcha:string\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: ''\n        },\n        validate: (values:LoginDataType) => {\n            const errors: FormikErrorType = {}\n            if (!values.email) {\n                errors.email = 'Required'\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address'\n            }\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 3) {\n                errors.password = 'Password should be more than 3 symbols'\n            }\n            return errors\n        },\n        onSubmit: (values:LoginDataType) => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n\n\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        { formik.touched.email && formik.errors.email && <div style={{color:'red'}}>{formik.errors.email}</div>}\n                        <TextField type=\"password\" label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                        />\n                        { formik.touched.password && formik.errors.password && <div style={{color:'red'}}>{formik.errors.password}</div>}\n                        <FormControlLabel label={'Remember me'}\n                                          control={<Checkbox {...formik.getFieldProps('password')}\n                                              checked={formik.values.rememberMe}\n                                          />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}"]},"metadata":{},"sourceType":"module"}